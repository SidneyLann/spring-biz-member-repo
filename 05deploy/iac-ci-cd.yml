name: Spring Boot WAR CI/CD with Terraform on Azure

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  WAR_NAME: spring-biz-member
  RESOURCE_GROUP: spring-app-rg
  LOCATION: koreacentral
  TOMCAT_VM_NAME: tomcat-vm

jobs:
  terraform-provision:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -var="resource_group_name=$RESOURCE_GROUP" -var="location=$LOCATION" -var="vm_name=$TOMCAT_VM_NAME"
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="resource_group_name=$RESOURCE_GROUP" -var="location=$LOCATION" -var="vm_name=$TOMCAT_VM_NAME"
        working-directory: ./terraform
        env:
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get VM Public IP
        id: ip
        run: |
          IP=$(terraform output -raw public_ip_address)
          echo "::set-output name=vm_ip::$IP"
        working-directory: ./terraform

  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Run tests
        run: mvn test

  deploy-to-tomcat:
    runs-on: ubuntu-latest
    needs: [terraform-provision, build-and-test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build WAR with Maven
        run: mvn clean package -DskipTests

      - name: Deploy WAR to Tomcat via SCP
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        with:
          host: ${{ steps.ip.outputs.vm_ip }}  # Use the IP from Terraform output
          user: ${{ secrets.TOMCAT_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}  # Use SSH key instead of password
          port: 22
          scp: |
            ./target/${{ env.WAR_NAME }}.war => /home/${{ secrets.TOMCAT_USER }}/webapps/

      - name: Restart Tomcat
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        with:
          host: ${{ steps.ip.outputs.vm_ip }}
          user: ${{ secrets.TOMCAT_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          last_ssh: |
            sudo systemctl restart tomcat
            sleep 30
            # Verify deployment
            curl -s http://localhost:8080/manager/text/list -u ${{ secrets.TOMCAT_MANAGER_USER }}:${{ secrets.TOMCAT_MANAGER_PASSWORD }} | grep ${{ env.WAR_NAME }}